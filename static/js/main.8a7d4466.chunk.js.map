{"version":3,"sources":["components/Gallery/index.module.scss","img/loader.gif","store/modules/galleryStore/actionCreators.jsx","store/modules/galleryStore/actionTypes.jsx","components/Gallery/index.jsx","store/modules/galleryStore/selectors.jsx","App.jsx","serviceWorker.js","store/modules/galleryStore/reducer.jsx","store/rootReducer.jsx","store/index.jsx","index.js"],"names":["module","exports","addQuery","title","type","payload","id","uniqid","deleteQuery","connect","state","queries","dispatch","useState","query","setQuery","results","setResults","loading","setLoading","fetchImages","value","fetch","then","response","json","data","length","window","confirm","className","styles","searchBarBoxShadow","container","onSubmit","e","preventDefault","searchGroup","onChange","target","placeholder","onClick","imagesHeaderContainer","dropdown","dropdownContent","map","key","listAlign","handleDelete","loaderContainer","src","loaderGif","alt","loader","imagesPosition","item","urls","regular","images","App","Boolean","location","hostname","match","store","combineReducers","action","filter","createStore","rootReducer","composeWithDevTools","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8a7d4466.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchBarBoxShadow\":\"Gallery_searchBarBoxShadow__1y5Wc\",\"container\":\"Gallery_container__hvh6T\",\"searchGroup\":\"Gallery_searchGroup__1gByK\",\"imagesHeaderContainer\":\"Gallery_imagesHeaderContainer__3cTgk\",\"dropdown\":\"Gallery_dropdown__8xIwX\",\"dropdownContent\":\"Gallery_dropdownContent__3Wd2v\",\"listAlign\":\"Gallery_listAlign__1pFjh\",\"loaderContainer\":\"Gallery_loaderContainer__1NDdG\",\"loader\":\"Gallery_loader__3ZFMk\",\"imagesPosition\":\"Gallery_imagesPosition__WJjHV\",\"images\":\"Gallery_images__2IYjd\"};","module.exports = __webpack_public_path__ + \"static/media/loader.aee4facb.gif\";","import { ADD_QUERY, DELETE_QUERY } from \"./actionTypes\";\nimport uniqid from \"uniqid\";\n\nexport const addQuery = (title) => ({\n    type: ADD_QUERY,\n    payload: {\n        id: uniqid(),\n        ...title\n    }\n});\n\nexport const deleteQuery = (id) => ({\n    type: DELETE_QUERY,\n    payload: {id}\n})\n\nexport default { addQuery, deleteQuery}","export const ADD_QUERY = \"ADD_QUERY\";\nexport const DELETE_QUERY = \"DELETE_QUERY\";","import React, { useState } from \"react\";\nimport styles from \"./index.module.scss\";\nimport { FaSearch } from \"react-icons/fa\";\nimport loaderGif from \"../../img/loader.gif\";\nimport { connect } from \"react-redux\";\nimport { getQueries } from \"../../store/selectors\";\nimport { addQuery, deleteQuery } from \"../../store/actionCreators\";\n\nconst Gallery = ({ queries, addQuery, deleteQuery }) => {\n  const [query, setQuery] = useState(\"\");\n  const [results, setResults] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const fetchImages = (value) => {\n    fetch(\n      `https://api.unsplash.com/search/photos/?client_id=Ytv2tQ9muH96PcLfrpaCN3dMus95Z5vdFWmgKjdisqE&query=${value}`\n    )\n      .then((response) => response.json())\n      .then((data) => {\n        setLoading(false);\n        if (data.results.length !== 0) {\n          setResults(data.results);\n        } else {\n          window.confirm(`ohh.. sorry, we didn't found ${value}`);\n        }\n      });\n    setLoading(true);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    addQuery({ title: query });\n  };\n\n  const handleDelete = (id) => {\n    deleteQuery(id);\n  };\n\n  return (\n    <div>\n      <div className={`container ${styles.searchBarBoxShadow}`}>\n        <form className={styles.container} onSubmit={handleSubmit}>\n          <span>FIND AMAZING IMAGE</span>\n          <div className={styles.searchGroup}>\n            <FaSearch />\n            <input\n              type=\"text\"\n              value={query}\n              onChange={(e) => setQuery(e.target.value)}\n              placeholder=\"Search free images\"\n            />\n          </div>\n          <button\n            className=\"btn\"\n            type=\"submit\"\n            onClick={() => fetchImages(query)}\n          >\n            Search\n          </button>\n        </form>\n      </div>\n      <div className=\"container\">\n        <div className={styles.imagesHeaderContainer}>\n          <h1>Gallery</h1>\n          <div className={styles.dropdown}>\n            <button className=\"btn\">Saved Queries</button>\n            {queries.queries.length > 0 ? (\n              <div className={styles.dropdownContent}>\n                {queries.queries.map(({ id, title }) => (\n                  <div key={id}>\n                    <div className={styles.listAlign} key={id}>\n                      <button\n                        className=\"btn btn--blank\"\n                        type=\"submit\"\n                        onClick={() => fetchImages(title)}\n                      >\n                        {title}\n                      </button>\n                      <button\n                        className=\"btn btn--sm\"\n                        onClick={() => handleDelete(id)}\n                      >\n                        Delete\n                      </button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className={styles.dropdownContent}>\n                <span>Empty</span>\n              </div>\n            )}\n          </div>\n        </div>\n        {loading ? (\n          <div className={styles.loaderContainer}>\n            <img src={loaderGif} alt=\"\" className={styles.loader} />\n          </div>\n        ) : (\n          <div className={styles.imagesPosition}>\n            {results.map((item) => {\n              return (\n                <img\n                  key={item.id}\n                  src={item.urls.regular}\n                  alt=\"\"\n                  className={styles.images}\n                />\n              );\n            })}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  queries: getQueries(state),\n});\n\nconst mapDispatchToPropos = (dispatch) => ({\n  addQuery: (title) => dispatch(addQuery(title)),\n  deleteQuery: (id) => dispatch(deleteQuery(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToPropos)(Gallery);\n","export const getQueries = ({ queries }) => queries;","import React from 'react';\nimport Gallery from \"./components/Gallery/\";\n\nconst App = () => {\n  return (\n    <div>\n      <Gallery/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ADD_QUERY, DELETE_QUERY } from \"./actionTypes\";\n\nconst store = {\n    queries: []\n}\n\nexport default function(state = store, action) {\n    switch (action.type) {\n        case ADD_QUERY:\n            return {\n                queries: [...state.queries, action.payload]\n            };\n\n        case DELETE_QUERY:\n            return {\n                queries: state.queries.filter(({id}) => id !== action.payload.id)\n            };\n        default:\n            return state;\n    }\n}","import { combineReducers } from \"redux\";\nimport galleryReducer from \"./modules/galleryStore/reducer\";\n\nexport default combineReducers({ \n  queries: galleryReducer,\n});","import { createStore } from \"redux\";\nimport rootReducer from \"./rootReducer\";\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nexport default createStore(rootReducer, composeWithDevTools());","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./scss/index.scss\";\nimport App from \"./App.jsx\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}